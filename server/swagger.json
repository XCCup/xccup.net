{
  "swagger": "2.0",
  "info": {
    "description": "This is the API for the new version of the XCCup.net.\n",
    "version": "1.0.0",
    "title": "XCCup",
    "termsOfService": "https://www.xccup.net",
    "contact": {
      "email": "admin@xccup.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost",
  "basePath": "/",
  "tags": [
    {
      "name": "flight",
      "description": "Everything regarding flights"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "sponsor",
      "description": "Operations about sponsors"
    },
    {
      "name": "team"
    },
    {
      "name": "sites"
    },
    {
      "name": "club"
    },
    {
      "name": "ranking"
    },
    {
      "name": "home"
    },
    {
      "name": "mail"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/mail": {
      "post": {
        "tags": ["mail"],
        "summary": "Send a message to a number of users",
        "description": "With this method it is possible to send a message to a variety of users",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "message",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "addressees": {
                  "type": "array",
                  "description": "A list of users to address",
                  "items": {
                    "type": "string"
                  }
                },
                "titleOfMessage": {
                  "type": "string"
                },
                "bodyOfMessage": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Mail send"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/start": {
      "get": {
        "tags": ["home"],
        "summary": "Get all information for the landing page",
        "description": "Returns all necessary information for the landing page",
        "operationId": "getStartingInformation",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LandingPageInformation"
              }
            }
          }
        }
      }
    },
    "/flight": {
      "get": {
        "tags": ["flight"],
        "summary": "Get all flights of current season",
        "description": "Returns all flights of the current season",
        "operationId": "getFlightsOfCurrentSeason",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasicFlight"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["flight"],
        "summary": "Add a new flight to the database",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Flight object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Flight"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["flight"],
        "summary": "Update an existing flight",
        "operationId": "updateFlight",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Flight object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Flight"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/flight/{flightId}": {
      "get": {
        "tags": ["flight"],
        "summary": "Find flight by ID",
        "description": "Returns a single flight",
        "operationId": "getFlightById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "flightId",
            "in": "path",
            "description": "ID of flight to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Flight"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight not found"
          }
        }
      },
      "delete": {
        "tags": ["flight"],
        "summary": "Deletes a flight",
        "operationId": "deleteFlight",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "flightId",
            "in": "path",
            "description": "Flight id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight not found"
          }
        }
      }
    },
    "/flight/season/{year}": {
      "get": {
        "tags": ["flight"],
        "summary": "Find flight by year",
        "description": "Returns all flights of the required season",
        "operationId": "getFlightBySeason",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "The year of the season of the flights to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BasicFlight"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flight not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "Add a new user to the database",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/names": {
      "get": {
        "tags": ["user"],
        "summary": "Get all usernames in the system",
        "operationId": "getUserNames",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/sponsors": {
      "get": {
        "tags": ["sponsor"],
        "summary": "Find all sponsors",
        "description": "Returns all current sponsors",
        "operationId": "getSponsors",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sponsor"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["sponsor"],
        "summary": "Add a new flight to the database",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Sponsor object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["sponsor"],
        "summary": "Update an existing flight",
        "operationId": "updateSponsor",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Sponsor object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sponsor not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/sponsors/{sponsorId}": {
      "get": {
        "tags": ["sponsor"],
        "summary": "Find Sponsor by ID",
        "description": "Returns a single sponsor",
        "operationId": "getSponsorById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sponsorId",
            "in": "path",
            "description": "ID of Sponsor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Sponsor"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sponsor not found"
          }
        }
      },
      "delete": {
        "tags": ["sponsor"],
        "summary": "Deletes a sponsor",
        "operationId": "deleteSponsor",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sponsorId",
            "in": "path",
            "description": "Sponsor id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sponsor not found"
          }
        }
      }
    },
    "/ranking": {
      "get": {
        "tags": ["ranking"],
        "summary": "Find all rankings",
        "description": "Returns all current rankings",
        "operationId": "getRankings",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RankingResult"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ranking"],
        "summary": "Add a new ranking to the database",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A RankingDefinition that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RankingDefinition"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["ranking"],
        "summary": "Update an existing ranking",
        "operationId": "updateRanking",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RankingDefinition object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RankingDefinition"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "RankingDefinition not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/ranking/{rankingId}": {
      "get": {
        "tags": ["ranking"],
        "summary": "Find ranking by ID",
        "description": "Returns a single ranking",
        "operationId": "getRankingById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "rankingId",
            "in": "path",
            "description": "ID of ranking to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RankingResult"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ranking not found"
          }
        }
      },
      "delete": {
        "tags": ["ranking"],
        "summary": "Deletes a ranking",
        "operationId": "deleteRanking",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "rankingId",
            "in": "path",
            "description": "Ranking id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ranking not found"
          }
        }
      }
    },
    "/ranking/season/{year}": {
      "get": {
        "tags": ["ranking"],
        "summary": "Find rankings by season",
        "description": "Returns all rankings of a season",
        "operationId": "getRankingBySeason",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "year of ranking to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RankingResult"
              }
            }
          },
          "400": {
            "description": "Invalid year supplied"
          },
          "404": {
            "description": "Ranking not found"
          }
        }
      }
    },
    "/sites": {
      "get": {
        "tags": ["sites"],
        "summary": "Find all sites",
        "description": "Returns all current sites",
        "operationId": "getSites",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlyingSite"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["sites"],
        "summary": "Add a new site to the database",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Site object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlyingSite"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["sites"],
        "summary": "Update an existing site",
        "operationId": "updateSite",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Site object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlyingSite"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Site not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/sites/{siteId}": {
      "get": {
        "tags": ["sites"],
        "summary": "Find site by ID",
        "description": "Returns a single site",
        "operationId": "getSiteById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "ID of Sponsor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FlyingSite"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Site not found"
          }
        }
      },
      "delete": {
        "tags": ["sites"],
        "summary": "Deletes a site",
        "operationId": "deleteSite",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "Site id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Site not found"
          }
        }
      }
    },
    "/team": {
      "get": {
        "tags": ["team"],
        "summary": "Find all teams",
        "description": "Returns all current teams",
        "operationId": "getTeams",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["team"],
        "summary": "Add a new team to the database",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Team object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["team"],
        "summary": "Update an existing team",
        "operationId": "updateTeam",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Team object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Team not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/team/{teamId}": {
      "get": {
        "tags": ["team"],
        "summary": "Find team by ID",
        "description": "Returns a single team",
        "operationId": "getTeamById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Team not found"
          }
        }
      },
      "delete": {
        "tags": ["team"],
        "summary": "Deletes a team",
        "operationId": "deleteTeam",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Team not found"
          }
        }
      }
    },
    "/club": {
      "get": {
        "tags": ["club"],
        "summary": "Find all clubs",
        "description": "Returns all current clubs",
        "operationId": "getClubs",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Club"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["club"],
        "summary": "Add a new club to the database",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Club object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Club"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["club"],
        "summary": "Update an existing club",
        "operationId": "updateClub",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Club object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Club"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Club not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/club/{clubId}": {
      "get": {
        "tags": ["club"],
        "summary": "Find club by ID",
        "description": "Returns a single club",
        "operationId": "getClubById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "clubId",
            "in": "path",
            "description": "ID of club to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Club"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Club not found"
          }
        }
      },
      "delete": {
        "tags": ["club"],
        "summary": "Deletes a club",
        "operationId": "deleteClub",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "clubId",
            "in": "path",
            "description": "Club id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Club not found"
          }
        }
      }
    }
  },
  "definitions": {
    "LandingPageInformation": {
      "type": "object",
      "properties": {
        "stats": {
          "type": "object",
          "properties": {
            "totalXcKm": {
              "type": "number"
            },
            "numberOfTeams": {
              "type": "integer"
            },
            "numberOfClubs": {
              "type": "integer"
            },
            "numberOfPilots": {
              "type": "integer"
            }
          }
        },
        "sponsors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sponsor"
          }
        },
        "flightsOfTheDay": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Flight"
          }
        },
        "topFlights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Flight"
          }
        },
        "topClubs": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "points": {
              "type": "number"
            },
            "distance": {
              "type": "number"
            }
          }
        },
        "topTeams": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "points": {
              "type": "number"
            },
            "distance": {
              "type": "number"
            }
          }
        },
        "topClasses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "className": {
                "type": "string"
              },
              "topPilots": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "pilotName": {
                      "type": "string"
                    },
                    "pilotId": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BasicFlight": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "pilot": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "photoUrl": {
              "type": "string"
            }
          }
        },
        "clubName": {
          "type": "string"
        },
        "teamName": {
          "type": "string"
        },
        "aircraft": {
          "$ref": "#/definitions/Aircraft"
        },
        "result" : {
          "type" : "object",
          "properties" : {
            "status" : {
              "type" : "string",
              "enum" : [ "Nicht in Wertung", "In Wertung", "Flugbuch", "In Bearbeitung" ]
            },
            "points" : {
              "type" : "number"
            },
            "distance" : {
              "type" : "number"
            },
            "type" : {
              "type" : "string"
            },
            "turnpoints" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "submitted": {
          "type": "string",
          "format": "date-time"
        },
        "igcUrl": {
          "type": "string"
        }
      }
    },
    "Flight": {
      "type": "object",
      "properties": {
        "basic": {
          "$ref": "#/definitions/BasicFlight"
        },
        "date": { "type": "string", "format": "date-time" },
        "pilot": {
          "type": "object",
          "properties": {
            "userId": "UUID",
            "name": "string",
            "club": {
              "type": "object",
              "items": {
                "name": "string",
                "id": "UUID"
              }
            },
            "team": {
              "type": "object",
              "items": {
                "name": "string",
                "id": "UUID"
              }
            }
          }
        },
        "details": {
          "type": "object",
          "items": {
            "distance": "integer",
            "taskType": "string",
            "points": "integer",
            "takeoff": {
              "type": "object",
              "items": {
                "name": "string",
                "id": "UUID"
              }
            },
            "landing": {
              "type": "object",
              "items": {
                "name": "string",
                "id": "UUID"
              }
            },
            "takeoffTime": { "type": "string", "format": "date-time" },
            "landingTime": { "type": "string", "format": "date-time" },
            "glider": "string",
            "rankingClass": "string",
            "flightDuration": "string",
            "rankingState": "string",
            "maxAlt": "string",
            "minAlt": "string",
            "maxClimbRate": "string",
            "maxSinkRate": "string",
            "averageSpeed": "string",
            "taskSpeed": "string",
            "uploadDate": { "type": "string", "format": "date-time" },
            "igcUrl": "url",
            "flightReport": "string"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "url": {
                "type": "url"
              },
              "description": {
                "type": "string"
              },
              "id": {
                "type": "UUID"
              }
            }
          }
        },
        "airbuddies": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "flightId": {
                "type": "integer"
              },
              "userId": {
                "type": "UUID"
              },
              "name": {
                "type": "string"
              },
              "sharedTime": {
                "type": "integer"
              }
            }
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "UUID"
              },
              "text": "string",
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "userAvatar": "url"
            }
          }
        },
        "fixes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "latitute": {
                "type": "string"
              },
              "longitute": {
                "type": "string"
              },
              "elevation": {
                "type": "integer"
              },
              "gpsAltitude": {
                "type": "integer"
              },
              "baroAltitude": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "RankingResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "season": {
          "type": "string"
        },
        "flights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicFlight"
          }
        }
      }
    },
    "RankingDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "season": {
          "type": "string"
        },
        "sqlQuery": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "birthday": {
          "type": "string",
          "description": "Needed for special rankings (e.g. Seniorenwertung)."
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "description": "The state the user lives in (e.g. RLP, NRW, LUX). Needed for possible state championships."
        },
        "gender": {
          "type": "string",
          "description": "Needed for special rankings (e.g. Damenwertung).",
          "enum": ["male", "female", "other"]
        },
        "tshirtSize": {
          "type": "string",
          "enum": ["S", "M", "L", "XL", "XXL"]
        },
        "aircraft": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aircraft"
          }
        },
        "emailOptions": {
          "type": "object",
          "properties": {
            "informIfComment": {
              "type": "boolean"
            },
            "newsletter": {
              "type": "boolean"
            },
            "teamSearch": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "Aircraft": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "rankingClass": {
          "type": "string"
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "numberOfFlights": {
          "type": "integer",
          "format": "int32"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Club": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "urlPath": {
          "type": "string"
        },
        "logoPath": {
          "type": "string"
        },
        "represantative": {
          "type": "string",
          "description": "The pilot with represents the club within the competion."
        }
      }
    },
    "Sponsor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "urlPath": {
          "type": "string"
        },
        "logoPath": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "contactInformation": {
          "type": "string"
        },
        "goldSponsor": {
          "type": "boolean"
        }
      }
    },
    "TakeoffRecord": {
      "type": "object",
      "properties": {
        "aircraft": {
          "$ref": "#/definitions/Aircraft"
        },
        "pilotName": {
          "type": "string"
        },
        "distance": {
          "type": "number"
        },
        "date": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "FlyingSite": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "club": {
          "type": "string"
        },
        "coodinates": {
          "type": "object",
          "properties": {
            "latitute": {
              "type": "string"
            },
            "longitute": {
              "type": "string"
            }
          }
        },
        "records": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "record": {
                "$ref": "#/definitions/TakeoffRecord"
              }
            }
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}
