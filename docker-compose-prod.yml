version: "3.8"

services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: xccup-client
    container_name: xccup-client
    env_file: ./client/.env
    restart: always
    depends_on:
      - server

    labels:
      traefik.enable: true
      traefik.http.routers.xccup.rule: "Host(`xccup.net`)"
      traefik.http.routers.xccup.entrypoints: websecure
      traefik.http.routers.xccup.tls.certresolver: myresolver
      traefik.http.routers.xccup.priority: 100
      traefik.docker.network: traefik

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: xccup-server
    container_name: xccup-server
    restart: always
    env_file: ./server/.env
    environment:
      - NODE_ENV=production
    volumes:
      - ./data:/home/node/app/data
      - ./import:/home/node/app/import
    depends_on:
      - db
    labels:
      traefik.enable: true
      traefik.http.routers.xccup-api.rule: "Host(`xccup.net`) && PathPrefix(`/api`) || Host(`test.xccup.net`) && PathPrefix(`/api`)"
      traefik.http.routers.xccup-api.entrypoints: websecure
      traefik.http.routers.xccup-api.tls.certresolver: myresolver
      traefik.http.services.xccup-api.loadbalancer.server.port: 65090
      traefik.http.routers.xccup-api.priority: 200
      traefik.docker.network: traefik
    command: ./docker-entrypoint.sh

  db:
    image: postgis/postgis:13-3.1
    container_name: xccup-db
    restart: always
    env_file: ./server/.env
    volumes:
      - xccup-db:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: xccup-db-admin
    restart: always
    env_file: ./server/.env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    labels:
      traefik.enable: true
      traefik.http.routers.xccup-pg-admin.rule: "Host(`pga.xccup.net`)"
      traefik.http.routers.xccup-pg-admin.entrypoints: websecure
      traefik.http.routers.xccup-pg-admin.tls.certresolver: myresolver
      traefik.port: 65080
      traefik.http.routers.xccup-pg-admin.priority: 100
      traefik.docker.network: traefik

  traefik:
    image: traefik:2.9.4
    restart: unless-stopped
    container_name: traefik
    command:
      #- "--log.level=DEBUG"
      #- "--api.insecure=true"
      - "--log.level=ERROR"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=info@xccup.net"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    labels:
      traefik.enable: true

      # Global redirection: http to https
      traefik.http.routers.http-catchall.rule: HostRegexp(`{host:(www\.)?.+}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: wwwtohttps

      # Global redirection: https (www.) to https
      traefik.http.routers.wwwsecure-catchall.rule: HostRegexp(`{host:(www\.).+}`)
      traefik.http.routers.wwwsecure-catchall.entrypoints: websecure
      traefik.http.routers.wwwsecure-catchall.tls: true
      traefik.http.routers.wwwsecure-catchall.middlewares: wwwtohttps

      # middleware: http(s)://(www.) to  https://
      traefik.http.middlewares.wwwtohttps.redirectregex.regex: ^https?://(?:www\.)?(.+)
      traefik.http.middlewares.wwwtohttps.redirectregex.replacement: https://$${1}
      traefik.http.middlewares.wwwtohttps.redirectregex.permanent: true

    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  xccup-db:
  pgadmin-data:


networks:
  default:
    name: traefik
