version: "3.8"

services:
  client:
      build:
        context: ./client
        dockerfile: Dockerfile
      image: xccup-client
      container_name: xccup-client
      env_file: ./client/.env
      restart: always
      depends_on:
        - server

      labels:
        traefik.enable: true
        traefik.http.routers.xccup.rule: "Host(`next.xccup.net`)"
        traefik.http.routers.xccup.entrypoints: websecure
        traefik.http.routers.xccup.tls.certresolver: myresolver
        traefik.http.routers.xccup.priority: 100
        traefik.docker.network: traefik

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: xccup-server
    container_name: xccup-server
    restart: always
    env_file: ./server/.env
    environment:
      - NODE_ENV=production
    depends_on:
      - db
    labels:
      traefik.enable: true
      traefik.http.routers.xccup-api.rule: "Host(`next.xccup.net`) && PathPrefix(`/api`)"
      traefik.http.routers.xccup-api.entrypoints: websecure
      traefik.http.routers.xccup-api.tls.certresolver: myresolver
      traefik.http.services.xccup-api.loadbalancer.server.port: 65090
      traefik.http.routers.xccup-api.priority: 200
      traefik.docker.network: traefik
    command: ./docker-entrypoint.sh

  db:
    image: postgis/postgis
    container_name: xccup-db
    restart: always
    env_file: ./server/.env
    volumes:
      - xccup-db:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: xccup-db-admin
    restart: always
    env_file: ./server/.env
    labels:
      traefik.enable: true
      traefik.http.routers.xccup-pg-admin.rule: "Host(`xccup.stephanschoepe.de`)"
      traefik.http.routers.xccup-pg-admin.entrypoints: websecure
      traefik.http.routers.xccup-pg-admin.tls.certresolver: myresolver
      traefik.port: 65080
      traefik.http.routers.xccup-pg-admin.priority: 100
      traefik.docker.network: traefik

volumes:
  xccup-db:

networks:
  default:
    name: traefik

